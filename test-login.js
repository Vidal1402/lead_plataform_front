const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000/api';

async function testLogin() {
  console.log('üîç Testando processo completo de login...\n');

  try {
    // 1. Primeiro, criar um usu√°rio
    console.log('1Ô∏è‚É£ Criando usu√°rio de teste...');
    const testEmail = `test-${Date.now()}@example.com`;
    const testPassword = '123456';
    
    let registerResponse;
    try {
      registerResponse = await axios.post(`${API_BASE_URL}/auth/register`, {
        name: 'Usu√°rio Teste',
        email: testEmail,
        password: testPassword
      });
      console.log('‚úÖ Usu√°rio criado com sucesso');
      console.log('üìù Resposta do registro:', JSON.stringify(registerResponse.data, null, 2));
    } catch (error) {
      if (error.response?.status === 400 && error.response?.data?.message?.includes('j√° cadastrado')) {
        console.log('‚ö†Ô∏è Usu√°rio j√° existe, continuando com login...');
      } else {
        console.log('‚ùå Erro no registro:', error.response?.data || error.message);
        return;
      }
    }

    // 2. Tentar fazer login
    console.log('\n2Ô∏è‚É£ Testando login...');
    try {
      const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
        email: testEmail,
        password: testPassword
      });
      
      console.log('‚úÖ Login bem-sucedido!');
      console.log('üìù Resposta do login:', JSON.stringify(loginResponse.data, null, 2));
      
      // 3. Verificar estrutura da resposta
      console.log('\n3Ô∏è‚É£ Verificando estrutura da resposta...');
      const { data } = loginResponse;
      
      if (!data.token) {
        console.log('‚ùå ERRO: Token n√£o encontrado na resposta');
        console.log('üí° O backend deve retornar um campo "token"');
        return;
      }
      
      if (!data.user && !data._id) {
        console.log('‚ùå ERRO: Dados do usu√°rio n√£o encontrados na resposta');
        console.log('üí° O backend deve retornar um campo "user" ou dados do usu√°rio no mesmo n√≠vel');
        return;
      }
      
      console.log('‚úÖ Estrutura da resposta est√° correta');
      
      // 4. Verificar se o token √© v√°lido
      console.log('\n4Ô∏è‚É£ Verificando token...');
      const token = data.token;
      console.log('üîë Token recebido:', token.substring(0, 50) + '...');
      
      if (token.length < 10) {
        console.log('‚ùå ERRO: Token parece ser muito curto');
        return;
      }
      
      console.log('‚úÖ Token parece v√°lido');
      
      // 5. Testar endpoint /auth/me se existir
      console.log('\n5Ô∏è‚É£ Testando endpoint /auth/me...');
      try {
        const meResponse = await axios.get(`${API_BASE_URL}/auth/me`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        console.log('‚úÖ Endpoint /auth/me funciona');
        console.log('üìù Dados do usu√°rio:', JSON.stringify(meResponse.data, null, 2));
      } catch (error) {
        if (error.response?.status === 404) {
          console.log('‚ö†Ô∏è Endpoint /auth/me n√£o existe (opcional)');
        } else if (error.response?.status === 401) {
          console.log('‚ùå Token inv√°lido ou endpoint /auth/me com problema');
        } else {
          console.log('‚ö†Ô∏è Erro no endpoint /auth/me:', error.response?.data || error.message);
        }
      }
      
      console.log('\nüéØ Teste conclu√≠do com sucesso!');
      console.log('‚úÖ O backend est√° funcionando corretamente');
      console.log('‚úÖ O frontend deve conseguir fazer login');
      
    } catch (error) {
      console.log('‚ùå Erro no login:', error.response?.data || error.message);
      console.log('üìä Status:', error.response?.status);
      console.log('üìä Headers:', error.response?.headers);
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar o teste
testLogin(); 